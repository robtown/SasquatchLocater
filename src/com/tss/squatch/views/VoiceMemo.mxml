<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" title="VoiceMemo"
			   width="200"
			   height="240"
			   backgroundColor="white"
			   backgroundAlpha="1.0"
			   close="handleCloseEvent();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.tss.squatch.events.VoiceEvent;
			
			import flash.events.SampleDataEvent;
			import flash.media.Microphone;
			import flash.media.Sound;
			import flash.utils.ByteArray;
			
			import mx.managers.PopUpManager;
			
			
			private var mic:Microphone;
			private var soundBytes:ByteArray;
			private var s:Sound;
			
			private var rec:Boolean=false;
			private var volume:Number;
			private var soundMap:Object;
			private var pan:Number;
			
			private function onToggleRecording(event:MouseEvent):void
			{
				this.rec = !rec;
				
				if (rec)
				{
					recordBtn.label = "Stop";
					this.soundBytes = new ByteArray();
					this.mic = Microphone.getMicrophone();
					if(this.mic != null){
						this.mic.setSilenceLevel(40);
						this.mic.gain = 100;
						this.mic.rate = 44;
						this.mic.setSilenceLevel(0,4000);
						this.mic.addEventListener(SampleDataEvent.SAMPLE_DATA, onMicSampleData);
						trace("mic event listener added");
					}
					else
					{
						trace("Microphone is null");
					}
				}
				else
				{
					recordBtn.label = "Record";
					this.mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, onMicSampleData);
					//this.mic = null;
					//this.playEcho();
					var tmpEvent:VoiceEvent = new VoiceEvent(VoiceEvent.NEWMEMO,true, true);
					tmpEvent.byteArray = this.soundBytes;
					dispatchEvent(tmpEvent);
				}
			}
			
			private function onMicSampleData(event:SampleDataEvent):void
			{
				while(event.data.bytesAvailable)
				{
					trace("capturing voice memo");
					var sample:Number = event.data.readFloat();
					this.soundBytes.writeFloat(sample);
				}
			}
			
			private function playEcho():void
			{
				this.volume = 1;
				this.pan = 1;
				this.soundMap = new Object();
				startPlayback();
			}
			private function startPlayback():void
			{
				if(this.soundBytes.length>0){
					soundBytes.position=0;
					var sound:Sound=new Sound();
					sound.addEventListener(SampleDataEvent.SAMPLE_DATA,onSamplePlayback);
					sound.play();
					
				}
				
				/*var soundCopy:ByteArray = new ByteArray();
				soundCopy.writeBytes(this.soundBytes);
				soundCopy.position = 0;
				var sound:Sound = new Sound();
				this.soundMap[sound] = soundCopy;
				sound.addEventListener(SampleDataEvent.SAMPLE_DATA, onSamplePlayback);
				sound.play();*/
				
			}
			
			
			
			
			
			private function onSamplePlayback(event:SampleDataEvent):void
			{
				var sample:Number;
				for(var i:int =0;i<8192;i++){
					if(this.soundBytes.bytesAvailable > 0){
						sample=soundBytes.readFloat();
						event.data.writeFloat(sample);
						event.data.writeFloat(sample);
					}
				}
				
				
				
				/*var sound:Sound = event.target as Sound;
				var soundCopy:ByteArray = ByteArray(this.soundMap[sound]);
				for (var i:int = 0; i < 8192 && soundCopy.bytesAvailable > 0; i++)
				{
				var sample:Number = soundCopy.readFloat();
				event.data.writeFloat(sample);
				event.data.writeFloat(sample);
				}*/
			}
			
			private function handleCloseEvent():void {
				PopUpManager.removePopUp(this);
			}    
			
			
		]]>
	</fx:Script>
	
	<s:HGroup>
		<s:Button id="recordBtn" label="Record" click="onToggleRecording(event);"/>
		<s:Button id="playBtn" label="Play" click="startPlayback();"/>
		
		
	</s:HGroup>
	
</s:TitleWindow>
